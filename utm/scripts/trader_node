#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third Party

# ROS
import rospy

# Robonomics communication
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash


class TraderNode:
    """
    A node used to listen a market and react by defined strategy.

    Usage
    =====
    TraderNode.act - a place for your strategy to react on incomming offers and demands
    By default it use reactive strategy to act on incoming offers and demands. If you would like to
    change it, please take a look on TraderNode.on_incoming_* functions.

    Important note
    ==============
    Please ensure you've made an *approve* on *factory.<version>.robonomics.eth* contract if you
    publish demands. Take a look on *ethereum_common* package for appropriate services.

    API
    ===

    Parameters
    ----------
    ~model : str
        Agent model IPFS hash
    ~token : str
        Contract address of token agent recieve as payment
    ~lot_lifetime : int
        How many blockcs agent's offers and demands are valid

    Subscribed Topics
    -----------------
    /liability/infochan/incoming/demand : robonomics_msgs/Demand
    /liability/infochan/incoming/offer : robonomics_msgs/Offer

    Services Called
    ---------------
    /eth/current_block
    /eth/accounts

    """

    def __init__(self):
        rospy.init_node('trader')
        rospy.loginfo('Launching trader node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts)) # AIRA ethereum addresses

        self.signing_demand = rospy.Publisher('/liability/infochan/eth/signing/demand', Demand, queue_size=128)
        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)
        rospy.Subscriber('/liability/infochan/incoming/offer', Offer, self.on_incoming_offer)

        rospy.loginfo('Trader node launched.')

    def act(self, incoming):
        """ Trader reaction tactics on incoming offers and demands """
        # if incoming[0] == 'offer':
        #     self.make_demand(incoming[1].objective, incoming[1].cost) # to publish a demand
        # if incoming[0] == 'demand':
        #     self.make_offer(incoming[1].objective, incoming[1].cost) # to publish an offer
        # TODO: PLEASE IMPLEMENT YOUR TRADING STRATEGY HERE
        pass

    def on_incoming_demand(self, incoming_demand: Demand):
        rospy.loginfo('Incoming demand %s...', str(incoming_demand))
        if (incoming_demand.model.multihash == rospy.get_param('~model') and
            incoming_demand.token.address == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')
            self.act(('demand', incoming_demand)) # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')

    def on_incoming_offer(self, incoming_offer: Offer):
        rospy.loginfo('Incoming offer %s...', str(incoming_offer))
        if (incoming_offer.model.multihash == rospy.get_param('~model') and
            incoming_offer.token.address == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')

            self.act(('offer', incoming_offer)) # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')

    def make_deadline(self):
        lifetime = int(rospy.get_param('~order_lifetime'))
        deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)().number + lifetime
        return str(deadline)

    def make_demand(self, objective, cost):
        rospy.loginfo('Making demand...')

        demand = Demand()
        demand.model = Multihash()
        demand.model.multihash = rospy.get_param('~model')
        demand.objective = objective
        demand.token = Address()
        demand.token.address = rospy.get_param('~token')
        demand.cost = cost
        demand.validatorFee = UInt256()
        demand.validatorFee.uint256 = '0'
        demand.validator = Address()
        demand.validator.address = '0x0000000000000000000000000000000000000000'
        demand.deadline = UInt256()
        demand.deadline.uint256 = self.make_deadline()

        self.signing_demand.publish(demand)
        rospy.loginfo(demand)

    def make_offer(self, objective, cost):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash()
        offer.model.multihash = rospy.get_param('~model')
        offer.objective = objective
        offer.token = Address()
        offer.token.address = rospy.get_param('~token')
        offer.cost = cost
        offer.lighthouse = Address()
        offer.lighthouse.address = rospy.get_param('~lighthouse')
        offer.validator = Address()
        offer.validator.address = '0x0000000000000000000000000000000000000000'
        offer.lighthouseFee = UInt256()
        offer.lighthouseFee.uint256 = '0'
        offer.deadline = UInt256()
        offer.deadline.uint256 = self.make_deadline()

        self.signing_offer.publish(offer)
        rospy.loginfo(offer)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    TraderNode().spin()
