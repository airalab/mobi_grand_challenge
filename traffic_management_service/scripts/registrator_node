#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ROS
import rospy

# Robonomics communication
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ipfs_common.msg import Multihash


class TraderNode:
    """Receive permission requests and proceed it sending signed message to Robonomics network
       to let providers issue a smart contract with request signed by vehicle and permission
       signed by unmanned traffic management service
    """

    def __init__(self):
        rospy.init_node('trader')

        self.signing_demand = rospy.Publisher('/liability/infochan/eth/signing/demand',
                                              Demand, queue_size=128)
        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer',
                                             Offer, queue_size=128)

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)
        rospy.Subscriber('/liability/infochan/incoming/offer', Offer, self.on_incoming_offer)

    def act(self, incoming):
        if incoming[0] == 'demand':
            rospy.loginfo('New request for permissioned path, points: %s.' % incoming[1].objective)
            self.make_offer(incoming[1].objective, incoming[1].cost) # to publish an offer

    def on_incoming_demand(self, incoming_demand: Demand):
        if (incoming_demand.model.multihash == rospy.get_param('~model') and
            incoming_demand.token.address == rospy.get_param('~token')):
            self.act(('demand', incoming_demand)) # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')

    def on_incoming_offer(self, incoming_offer: Offer):
        if (incoming_offer.model.multihash == rospy.get_param('~model') and
            incoming_offer.token.address == rospy.get_param('~token')):

            self.act(('offer', incoming_offer)) # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')

    def make_deadline(self):
        lifetime = int(rospy.get_param('~order_lifetime'))
        return str(9999999)

    def make_demand(self, objective, cost):

        demand = Demand()
        demand.model = Multihash()
        demand.model.multihash = rospy.get_param('~model')
        demand.objective = objective
        demand.token = Address()
        demand.token.address = rospy.get_param('~token')
        demand.cost = cost
        demand.validatorFee = UInt256()
        demand.validatorFee.uint256 = '0'
        demand.validator = Address()
        demand.validator.address = '0x0000000000000000000000000000000000000000'
        demand.deadline = UInt256()
        demand.deadline.uint256 = self.make_deadline()

        self.signing_demand.publish(demand)

    def make_offer(self, objective, cost):

        offer = Offer()
        offer.model = Multihash()
        offer.model.multihash = rospy.get_param('~model')
        offer.objective = objective
        offer.token = Address()
        offer.token.address = rospy.get_param('~token')
        offer.cost = cost
        offer.lighthouse = Address()
        offer.lighthouse.address = rospy.get_param('~lighthouse')
        offer.validator = Address()
        offer.validator.address = '0x0000000000000000000000000000000000000000'
        offer.lighthouseFee = UInt256()
        offer.lighthouseFee.uint256 = '0'
        offer.deadline = UInt256()
        offer.deadline.uint256 = self.make_deadline()

        self.signing_offer.publish(offer)
        rospy.loginfo('Registring permission...')

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    TraderNode().spin()
