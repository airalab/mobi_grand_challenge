#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Standart, System and Third party
import math
import threading

# ROS
import rospy
import tf
from std_msgs.msg import String
from std_srvs.srv import Empty
from geometry_msgs.msg import Pose, Twist
from gazebo_msgs.srv import GetModelState

from vehicle.srv import SetGoal


def dist_between(a, b):
    dist = math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)
    return dist


class Duckbot_g2g_controller:

    def __init__(self):
        rospy.init_node('duckbot_g2g_controller')
        self.robot_name = rospy.get_param('~veh') # 'duckiebot_' + rospy.get_param('~veh')

        rospy.wait_for_service('/gazebo/get_model_state')
        self.robot_dist_service = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
        rospy.sleep(1)

        self.pub_vel = rospy.Publisher('/' + self.robot_name + '/cmd_vel', Twist, queue_size=1)
        self.pub_pose = rospy.Publisher('~pose', Pose, queue_size=1)

        rospy.Service('~move_to_goal', SetGoal, self.move_to_goal)
        self.pose = Pose()

        _ = threading.Thread(target=self.update_pose)
        _.daemon = True
        _.start()

    def update_pose(self):
	rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            model_state = self.robot_dist_service('duckiebot_' + self.robot_name, 'world')
            self.pose = model_state.pose # TODO check
            self.pub_pose.publish(self.pose)
            rate.sleep()

    def move_to_goal(self, request):
        goal = request.goal
        base_speed = float(rospy.get_param('~base_speed', '0.5'))

	rate = rospy.Rate(3)
        while dist_between([self.pose.position.x, self.pose.position.y],
                           [goal.x, goal.y]) > 0.5 and \
              not rospy.is_shutdown():
            twist = self._calc_vel_cmd(base_speed, self.pose, goal)
            rospy.loginfo(twist)
            self.pub_vel.publish(twist)
            rate.sleep()
        self.pub_vel.publish(Twist())
        rospy.loginfo('Complete')
        return
    
    def _calc_vel_cmd(self, base_speed, pose, goal):
        (inc_x, inc_y, angle) = (0.0, 0.0, 0.0)
        (_, _, yaw) = tf.transformations.euler_from_quaternion([pose.orientation.x,
                      pose.orientation.y, pose.orientation.z, pose.orientation.w])

        dist = dist_between([pose.position.x, pose.position.y],
                            [goal.x, goal.y])
        inc_x = goal.x - pose.position.x
        inc_y = goal.y - pose.position.y
        goal_angle = math.atan2(inc_y, inc_x)
        angle = yaw - goal_angle

        while angle > math.pi: # normalize
            angle -= 2*math.pi
        while angle < -math.pi:
            angle += 2*math.pi

        inc_vel = angle * (2*base_speed) / math.pi

        twist = Twist() # for differential drive
        twist.linear.x = base_speed
        twist.angular.z = -inc_vel

        return twist

    def start(self):
        rospy.spin()


if __name__ == '__main__':
    Duckbot_g2g_controller().start()
