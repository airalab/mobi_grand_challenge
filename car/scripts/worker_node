#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest


class WorkerNode:
    # TODO: need an objective messages collector and empty objective (by new liability) starter
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/ready', Liability, self.process) # liability without objective

        self.pub = rospy.Publisher('~data', String, queue_size=128)

        rospy.wait_for_service('liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))

        rospy.loginfo('Worker node launched.')

    def process(self, liability):
        rospy.loginfo('Starting process...')
        self.liability_proxy.start(liability.address)

        # MAKE YOUR PROCESS HERE
        self.pub.publish(String(data='Result data')) 
        rospy.loginfo('Worker works!')

        
        self.liability_proxy.finish(liability.address)
        rospy.loginfo('Process complete.')
       
    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    WorkerNode().spin()
